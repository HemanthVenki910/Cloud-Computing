version: '3.1'

services:     
  zoo:
    image: zookeeper
    restart: on-failure
    hostname: zoo
    container_name: zoo
    ports:
      - 2181:2181
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=0.0.0.0:2888:3888;2181

  rmq:
    image: rabbitmq:3.6.16
    restart: on-failure
    container_name: rmq
    hostname: rmq

  flask-orchestrator:
   build:
    context: ./
    dockerfile: ./Orchestrator/Dockerfile-orchestrator
   container_name: flask-orchestrator
   image: flask-orchestrator:latest
   ports:
   - 80:5000
   volumes:
   - ./:/Orchestrator
   - /var/run/docker.sock:/var/run/docker.sock
   environment:
   - FLASK_APP=./Orchestrator/Orchestrator/app_orchestrator.py
   - PYTHONUNBUFFERED=0
   restart: on-failure 
   command: sh -c "sleep 20 && flask run --host=0.0.0.0"
   depends_on:
   - zoo
   - rmq
  
  master:
   build:
    context: ./
    dockerfile: ./Worker/Dockerfile-worker
   container_name: worker1000
   image: worker1000:latest
   environment:
   - PYTHONUNBUFFERED=0
   - container_name=worker1000
   volumes:
   - ./:/Worker
   - /var/run/docker.sock:/var/run/docker.sock
   command: sh -c "sleep 25 && python3 -u app_worker.py"
   pid: host
   depends_on:
   - zoo
   - rmq
   - flask-orchestrator

  slave:
   build:
    context: ./
    dockerfile: ./Worker/Dockerfile-worker
   container_name: worker1001
   image: worker1001:latest
   environment:
   - PYTHONUNBUFFERED=0
   - container_name=worker1001
   volumes:
   - ./:/Worker
   - /var/run/docker.sock:/var/run/docker.sock
   command: sh -c "sleep 30 && python3 -u app_worker.py"
   pid: host
   depends_on:
   - zoo
   - rmq
   - flask-orchestrator
